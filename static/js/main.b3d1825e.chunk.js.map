{"version":3,"sources":["components/common/header.js","components/notfound/notfound.js","components/list/eventtable.js","components/list/list.js","components/eventdetail/eventdetail.js","App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","className","Link","to","NotFound","EventTable","props","event","history","map","key","id","onClick","push","concat","name","protoTypes","propTypes","array","isRequired","object","withRouter","List","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","setState","data","eventtable","React","Component","EventDetail","eventId","match","params","presenter","summary","room","date","time","App","BrowserRouter_default","common_header","Switch","Route","path","component","exact","Boolean","window","location","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b3d1825e.chunk.js","sourcesContent":["import React from 'react';\r\nimport './header.css';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst Header = () => {\r\n    let mainTitle = \"CNIT133A - React Homework\";\r\n\r\n    return (\r\n        <div className=\"header\">\r\n            <Link to=\"/\">\r\n                <button className='header-logo'>ABC Seminar - Home</button>\r\n            </Link>     \r\n                <h1>{mainTitle}</h1> \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport './notfound.css';\r\n\r\nconst NotFound = () => {\r\n    return (\r\n        <div className=\"nf\">\r\n            <h1 className=\"nf-title\">Page Not Found!</h1>\r\n            <Link to=\"/\" className=\"nf-link\">Go to main page</Link>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default NotFound;","import React from 'react';\r\nimport propTypes from 'prop-types';\r\nimport { withRouter } from 'react-router-dom';\r\n\r\n\r\nconst EventTable = (props) => {\r\n    const { event, history } = props;\r\n\r\n        return (\r\n            <ul>\r\n            { event.map((event) => {\r\n              return <li key={event.id} onClick={ () => history.push(`/event/${event.id}`)}>{event.id} - {event.name}</li>\r\n            })}\r\n          </ul>\r\n        );\r\n}\r\n\r\nEventTable.protoTypes = {\r\n    event: propTypes.array.isRequired,\r\n    history: propTypes.object.isRequired\r\n}\r\n\r\nexport default withRouter(EventTable);","import React from 'react';\r\nimport data from '../../events.json';\r\nimport { withRouter } from 'react-router-dom';\r\nimport EventTable from './eventtable';\r\n\r\n\r\nclass List extends React.Component {\r\n    constructor() {\r\n        super();\r\n\r\n        this.state = {\r\n            event: []\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.setState({\r\n            event: data,\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const { event } = this.state;\r\n\r\n        return (\r\n            <div>\r\n                <EventTable event={event} />\r\n            </div>\r\n        );\r\n    }\r\n        \r\n}\r\n\r\nexport default withRouter(List);","import React from 'react';\r\nimport data from '../../events.json';\r\nimport './eventdetail.css';\r\n\r\nclass EventDetail extends React.Component {\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.state = {\r\n            event: {}\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        const eventId = this.props.match.params.id - 1;\r\n        this.setState({\r\n            event: data[eventId],\r\n        })\r\n    }\r\n    \r\n\r\n    render() {\r\n        const { event } = this.state;\r\n\r\n        return (\r\n            <div className=\"event\">\r\n                <h2 className=\"event-header\">Event Details</h2>\r\n                <ul className=\"event-detail\">\r\n                    <li><strong>Title: </strong>{event.name}</li>\r\n                    <li><strong>Presenter: </strong>{event.presenter}</li>\r\n                    <li><strong>Summary: </strong>{event.summary}</li>\r\n                    <li><strong>Location: </strong>{event.room}</li>\r\n                    <li><strong>Date: </strong>{event.date}</li>\r\n                    <li><strong>Time: </strong>{event.time}</li>\r\n                </ul>\r\n            </div>\r\n        );   \r\n    }\r\n}\r\n\r\nexport default EventDetail;","import React, { Component } from 'react';\nimport Header from './components/common/header';\nimport { Route, Switch } from 'react-router-dom';\nimport BrowserRouter from 'react-router-dom/BrowserRouter';\nimport NotFound from './components/notfound/notfound';\nimport List from './components/list/list';\nimport './App.css';\nimport EventDetail from './components/eventdetail/eventdetail';\n\nclass App extends Component {\n  render() {\n    return (\n      <BrowserRouter>\n        <div className=\"App\">\n          <Header />\n          <Switch>\n          <Route path=\"/\" component={List} exact />\n          <Route path=\"/event/:id\" component={EventDetail} exact/>\n          <Route component={NotFound} />\n          </Switch>\n        </div>\n      </BrowserRouter>\n      \n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}